#!/bin/sh

##############################################################################

# (c) 2016-2017 Cezary Jackiewicz <cezary@eko.one.pl>

##############################################################################

. /usr/share/libubox/jshn.sh

show_status()
{
SYSTEM_UPTIME=$(awk '{printf "@%dd %dh %dm\n", $1/3600/24, $1/3600%24, $1%3600/60}' /proc/uptime)
SYSTEM_UPTIME=$(echo ${SYSTEM_UPTIME/@0d 0h /})
SYSTEM_UPTIME=$(echo ${SYSTEM_UPTIME/@0d /})
SYSTEM_UPTIME=$(echo ${SYSTEM_UPTIME/@/})

SYSTEM_LOAD=$(awk '{printf "%s %s %s\n", $1, $2, $3}' /proc/loadavg)

if grep -q "time is valid" /tmp/state/dnsmasqsec 2> /dev/null; then
	SYSTEM_TIME=$(date "+%Y-%m-%d %H:%M")
else
	SYSTEM_TIME="-"
fi

json_load "$(ubus call network.interface.wan status)"
json_get_var WAN_UPTIME uptime
json_get_var IFNAME l3_device

if [ -n "$WAN_UPTIME" ]; then

	if grep -q "time is valid" /tmp/state/dnsmasqsec 2> /dev/null; then
		WAN_SINCE=$(date "+%Y-%m-%d %H:%M" -d "@$(($(date +%s) - $WAN_UPTIME))")
	else
		WAN_SINCE="-"
	fi

	WAN_UPTIME=$(echo $WAN_UPTIME | awk '{printf "@%dd %dh %dm\n", $1/3600/24, $1/3600%24, $1%3600/60}')
	WAN_UPTIME=$(echo ${WAN_UPTIME/@0d 0h /})
	WAN_UPTIME=$(echo ${WAN_UPTIME/@0d /})
	WAN_UPTIME=$(echo ${WAN_UPTIME/@/})
else
	WAN_SINCE="-"
	WAN_UPTIME="-"
fi

F=/tmp/easyconfig_wan_cnt
[ -e $F ] && WAN_UP_CNT=$(cat $F) || WAN_UP_CNT="-"

if [ -n "$IFNAME" ]; then
	WAN_RX=$(awk '/'$IFNAME':/{print $2}' /proc/net/dev)
	WAN_TX=$(awk '/'$IFNAME':/{print $10}' /proc/net/dev)
else
	WAN_RX="-"
	WAN_TX="-"
fi

WLAN_CLIENTS=0
RADIOS=$(uci show wireless | awk -F. '/type=/{print $2}')
for R in $RADIOS; do
	IFNAME=$(ubus call network.wireless status '{"device":"'$R'"}' |  awk -F\" '/ifname/ {print $4}')
	if [ -n "$IFNAME" ]; then
		for i in $IFNAME; do
			CNT=$(iw dev $i station dump | grep Station | wc -l)
			WLAN_CLIENTS=$((WLAN_CLIENTS + CNT))
		done
	fi
done

GUI_VERSION="-devel-"
VERSION=$(awk -F= '/DISTRIB_DESCRIPTION/{print $2}' /etc/openwrt_release | xargs)
MODEL=$(cat /tmp/sysinfo/model)

echo '{'
echo '"system_uptime":"'$SYSTEM_UPTIME'",'
echo '"system_load":"'$SYSTEM_LOAD'",'
echo '"system_time":"'$SYSTEM_TIME'",'
echo '"wlan_clients":"'$WLAN_CLIENTS'",'
echo '"wan_rx":"'$WAN_RX'",'
echo '"wan_tx":"'$WAN_TX'",'
echo '"wan_since":"'$WAN_SINCE'",'
echo '"wan_uptime":"'$WAN_UPTIME'",'
echo '"wan_up_cnt":"'$WAN_UP_CNT'",'
echo '"version":"'$VERSION'",'
echo '"gui_version":"'$GUI_VERSION'",'
echo '"model":"'$MODEL'"'
echo '}'
}

##############################################################################

show_config()
{
HOSTNAME=$(uci -q get system.@system[0].hostname)
WAN_PROTO=$(uci -q get network.wan.proto)
WAN_IPADDR=$(uci -q -P /var/state get network.wan.ipaddr)
WAN_NETMASK=$(uci -q -P /var/state get network.wan.netmask)
WAN_GATEWAY=$(uci -q -P /var/state get network.wan.gateway)
WAN_DNS=$(uci -q -P /var/state get network.wan.dns)
WAN_USE_DNS=$(uci -q get network.wan.dns)
[ -n "$WAN_USE_DNS" ] && WAN_USE_DNS=1 || WAN_USE_DNS=0
WAN_APN=$(uci -q get network.wan.apn)
[ -z "$WAN_APN" ] && WAN_APN="internet"
WAN_DEVICE=$(uci -q get network.wan.device)
WAN_PINCODE=$(uci -q get network.wan.pincode)
WAN_IFNAME=$(uci -q -P /var/state get network.wan.ifname)

if [ -e /etc/board.json ]; then
	WAN_IFNAME_DEFAULT=$(jsonfilter -i /etc/board.json -e '@.network.wan.ifname')
elif [ -e /etc/gargoyle_default_ifs ]; then
	WAN_IFNAME_DEFAULT=$(awk '{print $2}' /etc/gargoyle_default_ifs)
fi

WAN_IFNAME_HILINK=$(egrep -Hi "(cdc ethernet control|rndis communications control)" /sys/class/net/*/device/interface 2>/dev/null | cut -f5 -d/)
[ -z "$WAN_IFNAME_HILINK" ] && WAN_IFNAME_HILINK=$(ls -l /sys/class/net/*/device/driver | grep cdc_ether | sed 's!.*/sys/class/net/\(.*\)/device/.*!\1!')

if [ "x$WAN_PROTO" = "xdhcp" ]; then
	. /lib/functions/network.sh
	network_get_physdev WAN_IFNAME wan
	network_get_gateway WAN_GATEWAY wan
	network_get_ipaddr WAN_IPADDR wan
	[ $WAN_USE_DNS -eq 0 ] && network_get_dnsserver WAN_DNS wan
	network_get_subnet WAN_NETMASK wan
	WAN_NETMASK=${WAN_NETMASK##*/}
	if [ -n "$WAN_NETMASK" ]; then
		WAN_NETMASK=$(ipcalc.sh $WAN_IPADDR $WAN_NETMASK | awk -F= '/NETMASK/{print $2}')
	fi
fi

if echo "$WAN_DNS" | grep -q " "; then
	WAN_DNS1=$(echo $WAN_DNS | cut -f1 -d" ")
	WAN_DNS2=$(echo $WAN_DNS | cut -f2 -d" ")
else
	WAN_DNS1=$WAN_DNS
	WAN_DNS2=""
fi

LAN_IPADDR=$(uci -q get network.lan.ipaddr)
LAN_DHCP=$(uci -q get dhcp.lan.ignore)
if [ "x$LAN_DHCP" = "x1" ]; then
	LAN_DHCP_ENABLED=0
else
	LAN_DHCP_ENABLED=1
fi

HILINK_URL=""
if [ -n "$WAN_IFNAME_HILINK" ]; then
	if grep -q "usb:v12D1p" /sys/class/net/$WAN_IFNAME_HILINK/device/modalias 2>/dev/null; then
		if [ -n "$WAN_GATEWAY" ]; then
			HILINK_URL="http://$WAN_GATEWAY"
		fi
	fi
fi

echo '{'
echo '"system_hostname":"'$HOSTNAME'",'
echo '"wan_proto":"'$WAN_PROTO'",'
echo '"wan_ipaddr":"'$WAN_IPADDR'",'
echo '"wan_netmask":"'$WAN_NETMASK'",'
echo '"wan_gateway":"'$WAN_GATEWAY'",'
echo '"wan_use_dns":"'$WAN_USE_DNS'",'
echo '"wan_dns1":"'$WAN_DNS1'",'
echo '"wan_dns2":"'$WAN_DNS2'",'
echo '"wan_apn":"'$WAN_APN'",'
echo '"wan_device":"'$WAN_DEVICE'",'
echo '"wan_pincode":"'$WAN_PINCODE'",'
echo '"wan_ifname":"'$WAN_IFNAME'",'
echo '"wan_ifname_default":"'$WAN_IFNAME_DEFAULT'",'
echo '"wan_ifname_hilink":"'$WAN_IFNAME_HILINK'",'
echo '"hilink_url":"'$HILINK_URL'",'

echo '"wan_protos":["none"'
if [ -n "$WAN_IFNAME_DEFAULT" ]; then
	echo ',"dhcp","static"'
fi
tty=$(ls /dev/ttyUSB* /dev/ttyACM* 2>/dev/null)
if [ -n "$tty" ] ; then
	echo ',"3g"'
fi
qmi=$(grep qmi_wwan /sys/kernel/debug/usb/devices 2>/dev/null)
if [ -n "$qmi" ] ; then
	echo ',"qmi"'
fi
ncm=$(grep cdc_ncm /sys/kernel/debug/usb/devices 2>/dev/null)
if [ -n "$ncm" ] ; then
	echo ',"ncm"'
fi
if [ -n "$WAN_IFNAME_HILINK" ]; then
	echo ',"dhcp_hilink"'
fi
echo '],'

echo '"wan_devices":['
ttys=$(ls -1 /dev/ttyUSB* /dev/ttyACM* /dev/cdc-wdm* 2>/dev/null)
O=""
for tty in $ttys; do
	[ -n "$O" ] && O="$O,"
	O="$O"'"'$tty'"'
done
echo "$O"'],'

echo '"lan_ipaddr":"'$LAN_IPADDR'",'
echo '"lan_dhcp_enabled":"'$LAN_DHCP_ENABLED'",'

RADIOS=$(uci show wireless | awk -F. '/type=/{print $2}')
for R in $RADIOS; do
	echo '"'$R'":{'
	WLAN_DISABLED=$(uci -q get wireless.$R.disabled)
	WLAN_CHANNEL=$(uci -q get wireless.$R.channel)
	T=$(uci show wireless | awk -F. '/device=/{print $2}')
	if [ -n "$T" ]; then
		for WLAN_SEC in $T; do
			[ "x$(uci -q get wireless.$WLAN_SEC.network)" = "xlan" ] || continue
			[ "x$(uci -q get wireless.$WLAN_SEC.mode)" = "xap" ] || continue
			[ "x$(uci -q get wireless.$WLAN_SEC.device)" = "x$R" ] || continue
			WLAN_SSID=$(uci -q get wireless.$WLAN_SEC.ssid)
			WLAN_ENCRYPTION=$(uci -q get wireless.$WLAN_SEC.encryption)
			WLAN_KEY=$(uci -q get wireless.$WLAN_SEC.key)
			WLAN_DISABLED1=$(uci -q get wireless.$WLAN_SEC.disabled)
			[ "x$WLAN_DISABLED1" = "x1" ] && WLAN_DISABLED=1
			WLAN_ISOLATE1=$(uci -q get wireless.$WLAN_SEC.isolate)
			[ "x$WLAN_ISOLATE1" = "x1" ] && WLAN_ISOLATE=1 || WLAN_ISOLATE=0
			break
		done
		if [ "x$WLAN_SSID" = "x" ]; then
			WLAN_SEC=""
			WLAN_DISABLED=1
		fi
	else
		WLAN_DISABLED=1
	fi
	echo '"wlan_disabled":"'$WLAN_DISABLED'",'
	echo '"wlan_ssid":"'$WLAN_SSID'",'
	echo '"wlan_channel":"'$WLAN_CHANNEL'",'
	echo '"wlan_encryption":"'$WLAN_ENCRYPTION'",'
	echo '"wlan_key":"'$WLAN_KEY'",'
	echo '"wlan_isolate":"'$WLAN_ISOLATE'",'
	echo '"wlan_section":"'$WLAN_SEC'",'
	echo '"wlan_channels":{'
	O=""
	PHY=$(cat /sys/devices/$(uci -q get wireless.$R.path)/ieee80211/*/name 2>/dev/null)
	[ -z "$PHY" ] && PHY=$(cat /sys/devices/platform/$(uci -q get wireless.$R.path)/ieee80211/*/name 2>/dev/null)
	[ -n "$PHY" ] && O=$(iw phy $PHY info | grep -v "(disabled)" | grep -v "(no IR)" | awk '/\* [0-9]+ MHz/{dfs="false";if(index($0, "radar detection") != 0){dfs="true"};gsub(/\[|\]|\(|\)/,""); printf ",\"%d\":[\"%s\",\"%s\",%s]", $4, $2, $5, dfs}')
	if [ -z "$O" ]; then
		echo '"'$WLAN_CHANNEL'":["","",false]'
	else
		echo ${O:1}
	fi
	echo '},'
	echo '},'
done

DMZ=$(uci -q get firewall.dmz.dest_ip)
echo '"firewall_dmz":"'$DMZ'",'

T=$(uci -q get dhcp.@dnsmasq[0].logqueries)
echo '"dhcp_logqueries":"'$T'",'

echo '"services":{'

echo '"statistics":{'

if [ -e /sbin/stat.sh ]; then
	T=$(/sbin/stat.sh token)
	echo '"token":"'$T'",'
	T=$(uci -q get system.@system[0].stat)
	if [ "x$T" = "x1" ]; then
		echo '"enabled":"1"'
	else
		echo '"enabled":"0"'
	fi
else
	echo '"enabled":"-1"'
fi

echo '},'

if [ -e /usr/bin/sms_tool ]; then
	echo '"ussdsms":true,'
else
	echo '"ussdsms":false,'
fi

echo '}'

echo '}'

}
##############################################################################

show_watchdog()
{
echo '{'
[ -e /etc/crontabs/root ] && WAT=$(grep easyconfig_watchdog /etc/crontabs/root)

if [ -z "$WAT" ]; then
	W_ENABLED="false"
	W_MAM=""
else
	W_ENABLED="true"
	if [ -e /tmp/easyconfig_watchdog ]; then
		W_MAM=$(awk -F= '/round-trip/{print $2}' /tmp/easyconfig_watchdog)
	fi
fi

W_PERIOD=$(uci -q get easyconfig.watchdog.period)
[ -z "$W_PERIOD" ] && W_PERIOD="3"
W_PERIOD_CNT=$(uci -q get easyconfig.watchdog.period_count)
[ -z "$W_PERIOD_CNT" ] && W_PERIOD_CNT="1"
W_DELAY=$(uci -q get easyconfig.watchdog.delay)
[ -z "$W_DELAY" ] && W_DELAY="3"
W_DEST=$(uci -q get easyconfig.watchdog.dest)
[ -z "$W_DEST" ] && W_DEST="google.com"
W_ACTION=$(uci -q get easyconfig.watchdog.action)
[ -z "$W_ACTION" ] && W_ACTION="wan"

echo '"watchdog_enabled": '$W_ENABLED','
echo '"watchdog_period": "'$W_PERIOD'",'
echo '"watchdog_period_count": "'$W_PERIOD_CNT'",'
echo '"watchdog_delay": "'$W_DELAY'",'
echo '"watchdog_dest": "'$W_DEST'",'
echo '"watchdog_action": "'$W_ACTION'",'
echo '"watchdog_minavgmax": "'$W_MAM'"'
echo '}'
}

##############################################################################

show_clients()
{
WLAN_MAC=""
RADIOS=$(uci show wireless | awk -F. '/type=/{print $2}')
for R in $RADIOS; do
	IFNAME=$(ubus call  network.wireless status '{"device":"'$R'"}' | awk -F\" '/ifname/ {print $4}')
	if [ -n "$IFNAME" ]; then
		for i in $IFNAME; do
			WLAN_MAC="$WLAN_MAC "$(iw dev $i station dump | awk '{if($1 == "Station") {MAC=$2;station[MAC]=1} if($0 ~ /rx bytes/) {rx[MAC]=$3} if($0 ~ /tx bytes/) {tx[MAC]=$3}} END for (w in station) {printf "%s;%d;%d ", w, tx[w], rx[w]}')
		done
	fi
done

echo '{"clients":['
for M in $WLAN_MAC; do
	MAC=$(echo $M | cut -f1 -d";")
	T=$(awk '/'$MAC'/{printf "{\"mac\":\"%s\",\"ip\":\"%s\",\"real_name\":\"%s\",\"name\":\"%s\",", $2, $3, $4, $4}' /tmp/dhcp.leases)
	[ -z "$T" ] && T='{"mac":"'$MAC'","ip":"","real_name":"","name":"",'

	NMAC=$(echo $MAC | sed 's/://g')
	T1=$(uci -q get dhcp.m$NMAC.mac)
	if [ "x$T1" = "x$MAC" ]; then
		T1=$(uci -q get dhcp.m$NMAC.networkid)
		[ -n "$T1" ] && T=$(echo "$T" | sed "s|\"name\":\".*\",|\"name\":\"$T1\",|g")
	fi

	echo "$T"'"rx":'$(echo $M | cut -f2 -d";")',"tx":'$(echo $M | cut -f3 -d";")'},'
done
echo '{"mac":"","ip":"","real_name":"","name":"","rx":0,"tx":0}'
echo '],'

echo '"logs":['
T=$(logread -e "DHCPACK(" | awk '{printf "{\"time\":\"%s-%02d-%02d %s\",\"mac\":\"%s\",\"name\":\"%s\",\"event\":\"login\"},\n", $5, (match("JanFebMarAprMayJunJulAugSepOctNovDec",$2)+2)/3, $3, $4, $10, $11}')
T=$(printf "%s\n%s" "$T" "$(logread -e "AP-STA-DISCONNECTED" | awk '{printf "{\"time\":\"%s-%02d-%02d %s\",\"mac\":\"%s\",\"name\":\"\",\"event\":\"logout\"},\n", $5, (match("JanFebMarAprMayJunJulAugSepOctNovDec",$2)+2)/3, $3, $4, $10}')")

MACS=$(uci show dhcp | awk -F\' '/.mac=/{print $2}')
for MAC in $MACS; do
	NMAC=$(echo $MAC | sed 's/://g')
	NAME=$(uci -q get dhcp.m$NMAC.networkid)
	[ -n "$NAME" ] && T=$(echo "$T" | sed "s/,\"mac\":\"$MAC\",\"name\":\".*\",\"event\"/,\"mac\":\"\",\"name\":\"$NAME\",\"event\"/g")
done

echo "${T%?}"
echo ']'
echo '}'
}

##############################################################################

show_traffic()
{
if [ ! -e /usr/lib/easyconfig/easyconfig_traffic.txt.gz ]; then
	mkdir -p /usr/lib/easyconfig
	touch /usr/lib/easyconfig/easyconfig_traffic.txt
	gzip /usr/lib/easyconfig/easyconfig_traffic.txt
fi
echo '{'
[ -e /etc/crontabs/root ] && TEN=$(grep easyconfig_traffic /etc/crontabs/root)
if [ -n "$TEN" ]; then
	echo '"traffic_enabled": true,'
else
	echo '"traffic_enabled": false,'
fi

T_PERIOD=$(uci -q get easyconfig.traffic.period)
[ -z "$T_PERIOD" ] && T_PERIOD=10
T_CYCLE=$(uci -q get easyconfig.traffic.cycle)
[ -z "$T_CYCLE" ] && T_CYCLE=1

T_WARNING_ENABLED=$(uci -q get easyconfig.traffic.warning_enabled)
[ -z "$T_WARNING_ENABLED" ] && T_WARNING_ENABLED="0"
T_WARNING_VALUE=$(uci -q get easyconfig.traffic.warning_value)
[ -z "$T_WARNING_VALUE" ] && T_WARNING_VALUE="0"
T_WARNING_UNIT=$(uci -q get easyconfig.traffic.warning_unit)
[ -z "$T_WARNING_UNIT" ] && T_WARNING_UNIT="g"
T_WARNING_CYCLE=$(uci -q get easyconfig.traffic.warning_cycle)
[ -z "$T_WARNING_CYCLE" ] && T_WARNING_CYCLE="p"

echo '"traffic_period": "'$T_PERIOD'",'
echo '"traffic_cycle": "'$T_CYCLE'",'
echo '"traffic_warning_enabled": "'$T_WARNING_ENABLED'",'
echo '"traffic_warning_value": "'$T_WARNING_VALUE'",'
echo '"traffic_warning_unit": "'$T_WARNING_UNIT'",'
echo '"traffic_warning_cycle": "'$T_WARNING_CYCLE'"'
echo '}'
}

##############################################################################

show_modem()
{
	if [ "x$(uci -q get network.wan.proto)" = "xqmi" -a "x$(uci -q get easyconfig.modem.use_uqmi)" = "x1" ]; then
		D=$(uci -q get network.wan.device)
		T=$(uqmi -sd $D --get-serving-system --get-signal-info | sed 'N;s|\n| |;s|} {|,|')

		json_load "$T"

		json_get_var TYPE type
		MODE=$(echo $TYPE | tr 'a-z' 'A-Z')

		json_get_var PLMN_DESCRIPTION plmn_description

		json_get_var RSSI rssi
		if [ -n "$RSSI" ]; then
			[ $RSSI -ge -51 ] && RSSI=-51
			SIGNAL=$(((RSSI+113)*100/62))
		else
			SIGNAL=0
		fi

		json_get_var REGISTRATION registration
		json_get_var ROAMING roaming
		case "x$REGISTRATION" in
			"xnot_registered") REGISTRATION="0";;
			"xregistered") REGISTRATION="1";;
			"xsearching") REGISTRATION="2";;
			"xregistering_denied") REGISTRATION="3";;
			*) REGISTRATION="4";;
		esac
		[ "x$ROAMING" = "x1" ] && REGISTRATION="5"

		echo "{\"signal\":\"$SIGNAL\",\"operator_name\":\"$PLMN_DESCRIPTION\",\"mode\":\"$MODE\",\"registration\":\"$REGISTRATION\"}"
	else
		/usr/share/3ginfo-lite/3ginfo.sh
	fi
}

##############################################################################

show_ussd() {
	read input;
	json_load "$input"
	json_get_var code code
	if [ -z "$code" ]; then
		T="Error: wrong ussd code"
	else
		OPT=""
		T=$(uci -q get easyconfig.ussd.raw_input)
		[ "x$T" = "x1" ] && OPT="$OPT -R"
		T=$(uci -q get easyconfig.ussd.raw_output)
		[ "x$T" = "x1" ] && OPT="$OPT -r"
		[ -e /tmp/modem ] || /usr/share/3ginfo-lite/3ginfo.sh > /dev/null 2>&1
		DEVICE=$(cat /tmp/modem)
		T=$(sms_tool -d $DEVICE $OPT ussd "$code")
	fi
	echo "{\"response\":\"$T\"}"
}

##############################################################################

show_sms() {
	read input;
	json_load "$input"
	json_get_var action action
	json_get_var arg1 arg1
	json_get_var arg2 arg2

	[ -e /tmp/modem ] || /usr/share/3ginfo-lite/3ginfo.sh > /dev/null 2>&1
	DEVICE=$(cat /tmp/modem)

	if [ "x$action" = "xread" ]; then
		STORAGE=""
		T=$(uci -q get easyconfig.sms.storage)
		[ "x$T" = "x" ] || STORAGE="-s $T"
		T=$(sms_tool -d $DEVICE $STORAGE -f "%Y-%m-%d %H:%M:%S" recv)

		echo '{"msg":['

		first="1"
		key="0"
		while read -r line; do
			if echo "$line" | grep -q "MSG: "; then
				if [ "$first" = "0" ]; then
					echo '"},'
				fi
				echo '{'
				T=$(echo $line | cut -f2 -d" ")
				echo '"index":"'$T'",'
				first="0"
				key="1"
				continue
			fi
			if echo "$line" | grep -q "From: "; then
				T=$(echo $line | cut -f2 -d" ")
				echo '"sender":"'$T'",'
				continue
			fi
			if echo "$line" | grep -q "Date/Time: "; then
				T=$(echo $line | cut -f2 -d" ")
				T1=$(echo $line | cut -f3 -d" ")
				echo '"timestamp":"'$T $T1'",'
				continue
			fi
			if echo "$line" | grep -q "SMS segment "; then
				T=$(echo $line | cut -f3 -d" ")
				echo '"part":"'$T'",'
				T=$(echo $line | cut -f5 -d" ")
				echo '"total":"'$T'",'
				continue
			fi
			if [ "$key" = "1" ]; then
				printf "%s" '"content":"'
				key="0"
			else
				printf "\\n"
			fi
			printf "%s" "$line"
		done <<EOF
$T
EOF
		if [ "$first" = "0" ]; then
			echo '"}'
		fi

		echo ']}'

	fi

	if [ "x$action" = "xsend" ]; then
		T=$(sms_tool -d $DEVICE send "$arg1" "$arg2")
		echo "{\"response\":\"$T\"}" | tr '\n' ' '
	fi

	if [ "x$action" = "xdelete" ]; then
		T=$(sms_tool -d $DEVICE delete "$arg1")
		echo "{\"response\":\"$T\"}" | tr '\n' ' '
	fi
}

##############################################################################

show_queries() {
	echo '{"result":['
	T=$(logread -e "query\[A\]" | awk '$10 ~ /query\[A\]/ && $13 !~ /127.0.0.1/ {printf "{\"time\":\"%s-%02d-%02d %s\",\"query\":\"%s\",\"host\":\"%s\"},\n", $5, (match("JanFebMarAprMayJunJulAugSepOctNovDec",$2)+2)/3, $3, $4, $11, $13}END{print "{\"time\":\"\",\"query\":\"\",\"host\":\"\"}"}')
	IPS=$(echo "$T" | sed 's/.*"host":"\(.*\)".*/\1/g' | sort | uniq)

	for IP in $IPS; do
		MAC=$(awk '/'$IP'/{print $2}' /tmp/dhcp.leases)
		if [ -n "$MAC" ]; then
			NAME1=$(awk '/'$IP'/{print $4}' /tmp/dhcp.leases)
		else
			NAME1=""
			MAC=$(awk '/'$IP'/{print $4}' /proc/net/arp)
		fi
		if [ -n "$MAC" ]; then
			NMAC=$(echo $MAC | sed 's/://g')
			NAME2=$(uci -q get dhcp.m$NMAC.networkid)
			if [ -n "$NAME2" ]; then
				NAME="$NAME2"
			else
				NAME="$NAME1"
			fi
			if [ -n "$NAME" ]; then
				T=$(echo "$T" | sed "s/\"host\":\"$IP\"/\"host\":\"$NAME\"/g")
			fi
		fi
	done

	echo "$T"
	echo "]}"
}

##############################################################################

show_wifiscan() {
	echo '{"result":['
	for IFACE in /sys/class/net/wlan[0-9]; do
		IFACE1=$(basename $IFACE)
		iw dev $IFACE1 scan 2>/dev/null | awk '{gsub("(on","");if($1 == "BSS") {MAC = $2; wifi_enc[MAC] = ""; wifi_chan[MAC] = "?"; wifi_mode1[MAC] = ""; wifi_mode2[MAC] = ""}
			if($1 == "SSID:") {t="";for(i=2;i<=NF-1;++i){t=t$i" "};if(NF<2){t=""}else{t=t$NF}; gsub(/\\/,"\\\\", t); gsub(/\"/, "\\\"", t); wifi_ssid[MAC]=t}
			if($1 == "signal:") {wifi_sig[MAC] = $2}
			if($1 == "freq:") {wifi_freq[MAC] = $2; if($2<5000){wifi_mode1[MAC] = "g"}else{wifi_mode1[MAC] = "a"}}
			if($0 ~ /primary channel:/) {wifi_chan[MAC] = $4}
			if($0 ~ /secondary channel offset: no secondary/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT20"}
			if($0 ~ /secondary channel offset: above/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT40+"}
			if($0 ~ /secondary channel offset: below/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT40-"}
			if($0 ~ /VHT operation:/) {wifi_mode1[MAC] = "ac"; wifi_mode2[MAC] = "VHT20"}
			if($0 ~ /center freq segment 1:/) {if($6>0){wifi_mode2[MAC] = "VHT40"}}
			if($0 ~ /channel width: 1 (80 MHz)/) {wifi_mode2[MAC] = "VHT80"}
			if($0 ~ /Group cipher: CCMP/) {wifi_enc[MAC] = "WPA"}
			if($0 ~ /Group cipher: TKIP/) {wifi_enc[MAC] = "WPA"}
			if($0 ~ /Authentication suites: PSK/) {wifi_enc[MAC] = "WPA Personal"}
			if($0 ~ /Authentication suites: IEEE 802.1X/) {wifi_enc[MAC] = "WPA Enterprise"}
			} END { for (w in wifi_enc) {
					printf "{\"mac\":\"%s\",\"ssid\":\"%s\",\"freq\":\"%s\",\"signal\":\"%s\",\"channel\":\"%s\",\"encryption\":\"%s\",\"mode1\":\"%s\",\"mode2\":\"%s\"},\n", w, wifi_ssid[w], wifi_freq[w], wifi_sig[w], wifi_chan[w], wifi_enc[w], wifi_mode1[w], wifi_mode2[w]
				}
			}'
	done
	echo '{"mac":"","ssid":"","freq":"","signal":"","channel":"","encryption":"","mode1":"","mode2":""}'
	echo ']}'
}

##############################################################################

pincode()
{
	read input;
	json_load "$input"
	json_get_vars proto device pincode

	if [ "x$proto" = "xqmi" ]; then
		uqmi -d $device --verify-pin1 $pincode > /dev/null 2>&1
	fi
	if [ "x$proto" = "xncm" -o "x$proto" = "x3g" ]; then
		PINCODE="$pincode" gcom -d "$device" -s /etc/gcom/setpin.gcom > /dev/null 2>&1
	fi
	echo '{}'
}

detect_wan()
{
# modem usb qmi
	T=$(grep qmi_wwan /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$T" ] ; then
		F=$(mktemp)
		DEVICE=""
		DEVICES=$(ls /dev/cdc-wdm*)
		for D in $DEVICES; do
			echo "" > $F
			(uqmi -s -d $D --get-pin-status > $F) &
			sleep 2
			killall uqmi > /dev/null 2>&1
			if cat $F | grep -q '"pin1_status"'; then
				DEVICE=$D
				break
			fi
		done

		if [ -n "$DEVICE" ]; then
			if cat $F | grep -q '"pin1_status":"not_verified"'; then
				rm $F > /dev/null 2>&1
				echo '{"proto":"qmi","device":"'$DEVICE'","action":"pinrequired"}'
				exit 0
			fi
			rm $F > /dev/null 2>&1
			echo '{"proto":"qmi","device":"'$DEVICE'","apn":"internet"}'
			exit 0
		fi
	fi

# modem usb ncm
	ifdown wan
	T=$(grep cdc_ncm /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$T" ] ; then
		DEVICES=$(ls /dev/ttyUSB* /dev/cdc-wdm*)

		for D in $DEVICES; do
			O=$(gcom -d $D -s /etc/gcom/checkmodem.gcom)
			if echo "$O" | grep -q "SIM PIN"; then
				echo '{"proto":"ncm","device":"'$D'","action":"pinrequired"}'
				exit 0
			fi
			if echo "$O" | grep -q "+CPIN"; then
				DEVICE=$D
				break
			fi
		done

		APN=$(echo $O | awk -F, '/^\+CGDCONT: 1/{print $3}' | xargs)
		echo '{"proto":"ncm","device":"'$D'","apn":"'${APN:-internet}'"}'
		exit 0
	fi

# modem usb, generic
	ifdown wan
	T=$(ls /dev/ttyUSB* /dev/ttyACM* 2>/dev/null)
	if [ -n "$T" ] ; then

		for D in $T; do
			O=$(gcom -d $D -s /etc/gcom/checkpin.gcom)
			if echo "$O" | grep -q "SIM PIN"; then
				echo '{"proto":"3g","device":"'$D'","action":"pinrequired"}'
				exit 0
			fi
			if echo "$O" | grep -q "+CPIN"; then
				DEVICE=$D
				break
			fi
		done

		APN=$(echo $O | awk -F, '/^\+CGDCONT: 1/{print $3}' | xargs)
		echo '{"proto":"3g","device":"'$D'","apn":"'${APN:-internet}'"}'
		exit 0
	fi

# modem usb hilink or rndis
	T=$(egrep -Hi "(cdc ethernet control|rndis communications control)" /sys/class/net/*/device/interface 2>/dev/null | cut -f5 -d/)
	[ -z "$T" ] && T=$(ls -l /sys/class/net/*/device/driver | grep cdc_ether | sed 's!.*/sys/class/net/\(.*\)/device/.*!\1!')
	if [ -n "$T" ]; then
		echo '{"proto":"dhcp_hilink","ifname":"'$T'"}'
		exit 0
	fi

# wan port
	if [ -e /etc/board.json ]; then
		T=$(jsonfilter -i /etc/board.json -e '@.network.wan.ifname')
	elif [ -e /etc/gargoyle_default_ifs ]; then
		T=$(awk '{print $2}' /etc/gargoyle_default_ifs)
	fi
	if [ -n "$T" ] ; then
		echo '{"proto":"dhcp","ifname":"'$T'"}'
		exit 0
	fi

# none
	echo '{"proto":"none"}'
	exit 0
}

##############################################################################

case "$1" in
	list)
		echo '{'
		echo '"status":{},'
		echo '"config":{},'
		echo '"watchdog":{},'
		echo '"clients":{},'
		echo '"traffic":{},'
		echo '"modem":{},'
		echo '"ussd":{"code":"string"},'
		echo '"sms":{"action":"string","arg1":"string","arg2":"string"},'
		echo '"queries":{},'
		echo '"wifiscan":{},'
		echo '"detect_wan":{},'
		echo '"pincode":{"proto":"string","device":"string","pincode":"string"}'
		echo '}'
	;;
	call)
		case "$2" in
			status)
				show_status
				;;
			config)
				show_config
				;;
			watchdog)
				show_watchdog
				;;
			clients)
				show_clients
				;;
			traffic)
				show_traffic
				;;
			modem)
				show_modem
				;;
			ussd)
				show_ussd
				;;
			sms)
				show_sms
				;;
			queries)
				show_queries
				;;
			wifiscan)
				show_wifiscan
				;;
			detect_wan)
				detect_wan
				;;
			pincode)
				pincode
				;;
		esac
	;;
esac

exit 0
