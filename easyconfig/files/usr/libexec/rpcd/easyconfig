#!/bin/sh

##############################################################################

# (c) 2016-2020 Cezary Jackiewicz <cezary@eko.one.pl>

##############################################################################

. /usr/share/libubox/jshn.sh

if grep -q "time is valid" /tmp/state/dnsmasqsec 2>/dev/null; then
	TIMEISVALID="true"
else
	TIMEISVALID="false"
fi

function escapeJson() {
	ret=$1
	ret="${ret//\\/\\\\}"
	ret="${ret//\"/\\\"}"
	echo "$ret"
}

show_status()
{
T=$(awk '{printf "%d\n", $1}' /proc/uptime)
if $TIMEISVALID; then
	SYSTEM_UPTIME_SINCE=$(date "+%Y-%m-%d %H:%M" -d "@$(($(date +%s) - T))")
	SYSTEM_TIME=$(date "+%Y-%m-%d %H:%M")
fi

SYSTEM_UPTIME=$T

SYSTEM_LOAD=$(awk '{printf "%s %s %s\n", $1, $2, $3}' /proc/loadavg)

json_load "$(ubus call network.interface.wan status)"
json_get_var WAN_UPTIME uptime
json_get_var IFNAME l3_device
json_get_var PROTO proto

. /lib/functions/network.sh
if [ "x$PROTO" = "xqmi" ] || [ "x$PROTO" = "xncm" ]; then
	network_get_ipaddr WAN_IPADDR wan_4
else
	network_get_ipaddr WAN_IPADDR wan
fi

if [ -n "$WAN_UPTIME" ]; then
	if $TIMEISVALID; then
		WAN_UPTIME_SINCE=$(date "+%Y-%m-%d %H:%M" -d "@$(($(date +%s) - WAN_UPTIME))")
	fi
fi

F=/tmp/easyconfig_wan_up
if [ -e $F ]; then
	WAN_UP_CNT=$(wc -l < $F)
	for i in $(tail -n 10 $F); do
		SINCE=$((SYSTEM_UPTIME - i))
		WAN_UP_SINCE="$WAN_UP_SINCE{\"up\":$SINCE,"
		if $TIMEISVALID; then
			WAN_UP_SINCE="${WAN_UP_SINCE}\"since\":\""$(date "+%Y-%m-%d %H:%M:%S" -d "@$(($(date +%s) - SINCE))")"\"},"
		else
			WAN_UP_SINCE="${WAN_UP_SINCE}\"since\":\"\"},"
		fi
	done
fi

if [ -n "$IFNAME" ]; then
	WAN_RX=$(awk '/^[ ]*'$IFNAME':/{print $2}' /proc/net/dev)
	WAN_TX=$(awk '/^[ ]*'$IFNAME':/{print $10}' /proc/net/dev)
fi

WLAN_CLIENTS=0
IFACES=$(ubus call network.wireless status | jsonfilter -q -e '@.*.interfaces[@.config.network[*]="lan"].ifname')
for i in $IFACES; do
	CNT=$(iw dev $i station dump | grep -c Station)
	WLAN_CLIENTS=$((WLAN_CLIENTS+CNT))
done

VPN_UP=$(ifstatus vpn 2>/dev/null | jsonfilter -q -e "@.up")

echo '{'
echo '"system_uptime_since":"'$SYSTEM_UPTIME_SINCE'",'
echo '"system_uptime":"'$SYSTEM_UPTIME'",'
echo '"system_load":"'$SYSTEM_LOAD'",'
echo '"system_time":"'$SYSTEM_TIME'",'
echo '"wlan_clients":'$WLAN_CLIENTS','
echo '"wan_rx":"'$WAN_RX'",'
echo '"wan_tx":"'$WAN_TX'",'
echo '"wan_uptime_since":"'$WAN_UPTIME_SINCE'",'
echo '"wan_uptime":"'$WAN_UPTIME'",'
echo '"wan_up_cnt":"'$WAN_UP_CNT'",'
echo '"wan_up_since":['$WAN_UP_SINCE'],'
echo '"wan_ipaddr":"'$WAN_IPADDR'",'
echo '"vpn_up":'${VPN_UP:-false}','
echo '}'
}

##############################################################################

show_system()
{
GUI_VERSION="-devel-"
VERSION=$(awk -F= '/DISTRIB_DESCRIPTION/{print $2}' /etc/openwrt_release | xargs)
MODEL=$(cat /tmp/sysinfo/model)

if [ -e /tmp/modem ]; then
	DEVICE=$(cat /tmp/modem)
	O=$(gcom -d $DEVICE -s /etc/gcom/modeminfo.gcom)
	T=$(echo "$O" | awk '/CGMI:/{gsub(/.*CGMI[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
	[ -n "$T" ] && VENDOR="$T"
	T=$(echo "$O" | awk '/CGMM:/{gsub(/.*CGMM[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
	[ -n "$T" ] && PRODUCT="$T"
	T=$(echo "$O" | awk '/CGMR:/{gsub(/.*CGMR[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
	[ -n "$T" ] && REVISION="$T"
	T=$(echo "$O" | awk '/CGSN:/{gsub(/.*CGSN[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
	[ -n "$T" ] && IMEI="$T"
	T=$(echo "$O" | awk '/CCID:/{gsub(/.*CCID[ ]*:[ ]*/,"");gsub(/"/,"");print $0}')
	[ -n "$T" ] && ICCID="$T"
fi

echo '{"modem":{'
echo '"vendor":"'$VENDOR'",'
echo '"product":"'$PRODUCT'",'
echo '"revision":"'$REVISION'",'
echo '"imei":"'$IMEI'",'
echo '"iccid":"'$ICCID'"},'
echo '"version":"'$VERSION'",'
echo '"gui_version":"'$GUI_VERSION'",'
echo '"model":"'$MODEL'"'
echo '}'
}

##############################################################################

show_config()
{
HOSTNAME=$(uci -q get system.@system[0].hostname)
WAN_PROTO=$(uci -q get network.wan.proto)
WAN_IPADDR=$(uci -q -P /var/state get network.wan.ipaddr)
WAN_NETMASK=$(uci -q -P /var/state get network.wan.netmask)
WAN_GATEWAY=$(uci -q -P /var/state get network.wan.gateway)
WAN_DNS=$(uci -q -P /var/state get network.wan.dns)
WAN_DNS_SOURCE="config"
WAN_APN=$(uci -q get network.wan.apn)
WAN_DEVICE=$(uci -q get network.wan.device)
WAN_PINCODE=$(uci -q get network.wan.pincode)
WAN_IFNAME=$(uci -q -P /var/state get network.wan.ifname)

if [ -e /etc/board.json ]; then
	WAN_IFNAME_DEFAULT=$(jsonfilter -i /etc/board.json -e '@.network.wan.ifname')
elif [ -e /etc/gargoyle_default_ifs ]; then
	WAN_IFNAME_DEFAULT=$(awk '{print $2}' /etc/gargoyle_default_ifs)
fi

WAN_IFNAME_HILINK=$(grep -EHi "(cdc ethernet control|rndis communications control)" /sys/class/net/*/device/interface 2>/dev/null | cut -f5 -d/)
[ -z "$WAN_IFNAME_HILINK" ] && WAN_IFNAME_HILINK=$(ls -l /sys/class/net/*/device/driver | grep cdc_ether | sed 's!.*/sys/class/net/\(.*\)/device/.*!\1!')

if [ "x$WAN_PROTO" = "xdhcp" ]; then
	. /lib/functions/network.sh
	network_get_physdev WAN_IFNAME wan
	network_get_gateway WAN_GATEWAY wan
	network_get_ipaddr WAN_IPADDR wan
	if [ -z "$WAN_DNS" ]; then
		network_get_dnsserver WAN_DNS wan
		WAN_DNS_SOURCE="dhcp"
	fi
	network_get_subnet WAN_NETMASK wan
	WAN_NETMASK=${WAN_NETMASK##*/}
	if [ -n "$WAN_NETMASK" ]; then
		WAN_NETMASK=$(ipcalc.sh $WAN_IPADDR $WAN_NETMASK | awk -F= '/NETMASK/{print $2}')
	fi
fi

if echo "$WAN_DNS" | grep -q " "; then
	WAN_DNS1=$(echo $WAN_DNS | cut -f1 -d" ")
	WAN_DNS2=$(echo $WAN_DNS | cut -f2 -d" ")
else
	WAN_DNS1=$WAN_DNS
	WAN_DNS2=""
fi

if [ -e /etc/init.d/stubby ]; then
	STUBBY="true"
	T=$(uci -q get stubby.global.listen_address)
	T1=$(uci -q get dhcp.@dnsmasq[0].server | sed 's/#/@/g')
	if [ -n "$T1" ]; then
		echo "$T" | grep -q "$T1" && WAN_DNS_SOURCE="stubby"
	fi
else
	STUBBY="false"
fi

LAN_IPADDR=$(uci -q get network.lan.ipaddr)
LAN_DHCP=$(uci -q get dhcp.lan.ignore)
[ "x$LAN_DHCP" = "x1" ] && LAN_DHCP_ENABLED="false" || LAN_DHCP_ENABLED="true"

WAN_DASHBOARD_URL=""
if [ -n "$WAN_IFNAME_HILINK" ]; then
	if [ -n "$WAN_GATEWAY" ]; then
		if grep -q "usb:v12D1p" /sys/class/net/$WAN_IFNAME_HILINK/device/modalias 2>/dev/null; then
			WAN_DASHBOARD_URL="http://$WAN_GATEWAY"
		fi
		if grep -q "usb:v19D2p" /sys/class/net/$WAN_IFNAME_HILINK/device/modalias 2>/dev/null; then
			WAN_DASHBOARD_URL="http://$WAN_GATEWAY"
		fi
	fi
fi

WAN_MODEM_MODE=""
if [ "x$WAN_PROTO" = "x3g" ]; then
	WAN_MODEM_MODE=$(uci -q get network.wan.service)
fi
if [ "x$WAN_PROTO" = "xqmi" ]; then
	WAN_MODEM_MODE=$(uci -q get network.wan.modes)
fi
if [ "x$WAN_PROTO" = "xncm" ]; then
	WAN_MODEM_MODE=$(uci -q get network.wan.mode)
fi

WAN_WANPORT="none";
if [ -n "$WAN_IFNAME_DEFAULT" ]; then
	case "$(uci -q get network.lan.ifname)" in
		*$WAN_IFNAME_DEFAULT*)
		WAN_WANPORT="bridge"
		;;
	esac
fi

echo '{'
echo '"system_hostname":"'$HOSTNAME'",'
echo '"wan_proto":"'$WAN_PROTO'",'
echo '"wan_ipaddr":"'$WAN_IPADDR'",'
echo '"wan_netmask":"'${WAN_NETMASK:-255.255.255.0}'",'
echo '"wan_gateway":"'$WAN_GATEWAY'",'
echo '"wan_dns1":"'$WAN_DNS1'",'
echo '"wan_dns2":"'$WAN_DNS2'",'
echo '"wan_dns_source":"'$WAN_DNS_SOURCE'",'
echo '"wan_apn":"'${WAN_APN:-internet}'",'
echo '"wan_device":"'$WAN_DEVICE'",'
echo '"wan_pincode":"'$WAN_PINCODE'",'
echo '"wan_ifname":"'$WAN_IFNAME'",'
echo '"wan_ifname_default":"'$WAN_IFNAME_DEFAULT'",'
echo '"wan_ifname_hilink":"'$WAN_IFNAME_HILINK'",'
echo '"wan_dashboard_url":"'$WAN_DASHBOARD_URL'",'
echo '"wan_modem_mode":"'$WAN_MODEM_MODE'",'
echo '"wan_wanport":"'$WAN_WANPORT'",'

echo '"wan_protos":["none"'
if [ -n "$WAN_IFNAME_DEFAULT" ]; then
	echo ',"dhcp","static"'
fi
tty=$(ls /dev/ttyUSB* /dev/ttyACM* 2>/dev/null)
if [ -n "$tty" ] ; then
	echo ',"3g"'
fi
qmi=$(grep qmi_wwan /sys/kernel/debug/usb/devices 2>/dev/null)
if [ -n "$qmi" ] ; then
	echo ',"qmi"'
fi
ncm=$(grep cdc_ncm /sys/kernel/debug/usb/devices 2>/dev/null)
if [ -n "$ncm" ] ; then
	echo ',"ncm"'
fi
if [ -n "$WAN_IFNAME_HILINK" ]; then
	echo ',"dhcp_hilink"'
fi
echo '],'

echo '"wan_devices":['
ttys=$(ls -1 /dev/ttyUSB* /dev/ttyACM* /dev/cdc-wdm* 2>/dev/null)
O=""
for tty in $ttys; do
	[ -n "$O" ] && O="$O,"
	O="$O"'"'$tty'"'
done
echo "$O"'],'

echo '"lan_ipaddr":"'$LAN_IPADDR'",'
echo '"lan_dhcp_enabled":'$LAN_DHCP_ENABLED','

WLAN_CURRENT_CHANNELS=$(iw dev 2>/dev/null | awk '/channel/{if($2 > 14){printf "{\"channel\":%d,\"min\":%d,\"max\":%d},\n", $2, ($9-$6/2-5160)/5+32, ($9+$6/2-5160)/5+32}else{printf "{\"channel\":%d,\"min\":%d,\"max\":%d},\n", $2, ($9-$6/2-2412)/5+1, ($9+$6/2-2412)/5+1}}' | sort -u)
echo '"wlan_current_channels":['$WLAN_CURRENT_CHANNELS'],'
RADIOS=$(uci -q show wireless | awk -F. '/type=/{print $2}')
echo '"wlan_devices":['
for R in $RADIOS; do
	echo '"'$R'",'
done
echo "],"
for R in $RADIOS; do
	echo '"'$R'":{'
	WLAN_DISABLED=$(uci -q get wireless.$R.disabled)
	WLAN_TXPOWER=$(uci -q get wireless.$R.txpower)
	WLAN_CHANNEL=$(uci -q get wireless.$R.channel)
	[ "x$WLAN_CHANNEL" = "xauto" ] && WLAN_CHANNEL=0
	T=$(uci -q show wireless | awk -F. '/device=.*'$R'/{print $2}')
	if [ -n "$T" ]; then
		for WLAN_SEC in $T; do
			[ "x$(uci -q get wireless.$WLAN_SEC.network)" = "xlan" ] || continue
			[ "x$(uci -q get wireless.$WLAN_SEC.mode)" = "xap" ] || continue
			WLAN_SSID=$(uci -q get wireless.$WLAN_SEC.ssid)
			WLAN_ENCRYPTION=$(uci -q get wireless.$WLAN_SEC.encryption)
			WLAN_KEY=$(uci -q get wireless.$WLAN_SEC.key)
			WLAN_DISABLED1=$(uci -q get wireless.$WLAN_SEC.disabled)
			[ "x$WLAN_DISABLED1" = "x1" ] && WLAN_DISABLED=1
			WLAN_ISOLATE=$(uci -q get wireless.$WLAN_SEC.isolate)
			break
		done
		if [ "x$WLAN_SSID" = "x" ]; then
			WLAN_SEC=""
			WLAN_DISABLED=1
		fi
	else
		WLAN_DISABLED=1
	fi
	echo '"wlan_disabled":'${WLAN_DISABLED:-0}','
	echo '"wlan_txpower":"'$WLAN_TXPOWER'",'
	echo '"wlan_ssid":"'$(escapeJson "$WLAN_SSID")'",'
	echo '"wlan_channel":"'$WLAN_CHANNEL'",'
	echo '"wlan_encryption":"'$WLAN_ENCRYPTION'",'
	echo '"wlan_key":"'$(escapeJson "$WLAN_KEY")'",'
	echo '"wlan_isolate":'${WLAN_ISOLATE:-0}','
	echo '"wlan_section":"'$WLAN_SEC'",'
	echo '"wlan_channels":{'
	O=""
	PHY=$(cat /sys/devices/$(uci -q get wireless.$R.path)/ieee80211/*/name 2>/dev/null)
	[ -z "$PHY" ] && PHY=$(cat /sys/devices/platform/$(uci -q get wireless.$R.path)/ieee80211/*/name 2>/dev/null)
	[ -n "$PHY" ] && O=$(iw phy $PHY info | grep -v "(disabled)" | grep -v "(no IR)" | awk '/\* [0-9]+ MHz/{dfs="false";if(index($0, "radar detection") != 0){dfs="true"};gsub(/\[|\]|\(|\)/,""); printf ",\"%d\":[\"%s\",\"%s\",%s]", $4, $2, $5, dfs}')
	if [ -z "$O" ]; then
		echo '"'$WLAN_CHANNEL'":["","",false]'
	else
		echo ${O:1}
	fi
	echo '},'
	echo '},'
done

T=$(uci -q get firewall.dmz.dest_ip)
echo '"firewall_dmz":"'$T'",'

T=$(uci -q get firewall.adblock_dns_53)
[ "x$T" = "xredirect" ] && T="true" || T="false"
echo '"lan_forcedns":'$T','

T=$(uci -q get dhcp.@dnsmasq[0].logqueries)
[ "x$T" = "x1" ] && T="true" || T="false"
echo '"dhcp_logqueries":'$T','

BUTTON_NAME=""
BUTTON=""
ACTION="none"
case $(cat /tmp/sysinfo/board_name) in
	"cellc,rtl30vw"|\
	"dlink,dwr-921-c1"|\
	"tl-wr902ac-v1"|\
	"tplink,tl-mr3020-v1"|\
	"tplink,tl-mr3020-v3"|\
	"tplink,tl-wr902ac-v3")
		BUTTON_NAME="WPS"
		BUTTON="wps"
		;;
	"tl-mr3220"|\
	"tl-mr3420"|\
	"tl-mr3420-v2")
		BUTTON_NAME="QSS"
		BUTTON="wps"
		;;
	"mr200"|\
	"tl-mr3220-v2"|\
	"tplink,tl-mr3420-v5")
		BUTTON_NAME="WIFI"
		BUTTON="rfkill"
		;;
esac
if [ -n "$BUTTON" ]; then
	if grep -q leds /etc/rc.button/$BUTTON; then
		ACTION="leds"
	fi
	if grep -q rfkill /etc/rc.button/$BUTTON; then
		ACTION="wifi"
	fi
	if grep -q "ifup vpn" /etc/rc.button/$BUTTON; then
		ACTION="vpn"
	fi
fi
echo '"button":{"name":"'$BUTTON_NAME'","code":"'$BUTTON'","action":"'$ACTION'"},'

echo '"services":{'

echo '"statistics":{'

if [ -e /sbin/stat.sh ]; then
	T=$(/sbin/stat.sh token)
	echo '"token":"'$T'",'
	T=$(uci -q get system.@system[0].stat)
	if [ "x$T" = "x1" ]; then
		echo '"enabled":1'
	else
		echo '"enabled":0'
	fi
else
	echo '"enabled":-1'
fi

echo '},'

if [ -e /usr/bin/sms_tool ]; then
	echo '"ussdsms":true,'
else
	echo '"ussdsms":false,'
fi

if [ -f /usr/lib/pppd/*/pptp.so ]; then
	echo '"pptp":true,'
else
	echo '"pptp":false,'
fi

if [ -e /etc/init.d/adblock ]; then
	echo '"adblock":true,'
else
	echo '"adblock":false,'
fi

if [ -e /etc/init.d/nft-qos ]; then
	echo '"nftqos":true,'
else
	echo '"nftqos":false,'
fi

echo '"stubby":'$STUBBY','

if [ -e /usr/bin/sunwait ]; then
	echo '"sunwait":true,'
else
	echo '"sunwait":false,'
fi

if hostapd -vsae; then
	echo '"sae":true,'
else
	echo '"sae":false,'
fi

echo '}'

echo '}'

}
##############################################################################

show_watchdog()
{
echo '{'
[ -e /etc/crontabs/root ] && WAT=$(grep easyconfig_watchdog /etc/crontabs/root)
W_ENABLED="false"
W_MAM=""
W_RUNDATE=""

if [ -n "$WAT" ]; then
	W_ENABLED="true"
	if [ -e /tmp/easyconfig_watchdog ]; then
		W_MAM=$(awk '/round-trip/{print $4}' /tmp/easyconfig_watchdog)
		W_RUNDATE=$(busybox ls -e /tmp/easyconfig_watchdog 2>/dev/null | awk '{printf "%s-%02d-%02d %s\n", $10, (match("JanFebMarAprMayJunJulAugSepOctNovDec",$7)+2)/3, $8, $9}')
		[ -z "$W_RUNDATE" ] && W_RUNDATE=$(ls --full-time /tmp/easyconfig_watchdog 2>/dev/null | awk '{printf "%s %s\n", $6, $7}')
	fi
fi

W_PERIOD=$(uci -q get easyconfig.watchdog.period)
W_PERIOD_CNT=$(uci -q get easyconfig.watchdog.period_count)
W_DELAY=$(uci -q get easyconfig.watchdog.delay)
W_DEST=$(uci -q get easyconfig.watchdog.dest)
W_ACTION=$(uci -q get easyconfig.watchdog.action)

echo '"watchdog_enabled": '$W_ENABLED','
echo '"watchdog_period": "'${W_PERIOD:-3}'",'
echo '"watchdog_period_count": "'${W_PERIOD_CNT:-1}'",'
echo '"watchdog_delay": "'${W_DELAY:-3}'",'
echo '"watchdog_dest": "'${W_DEST:-google.com}'",'
echo '"watchdog_action": "'${W_ACTION:-wan}'",'
echo '"watchdog_minavgmax": "'$W_MAM'",'
echo '"watchdog_rundate": "'$W_RUNDATE'"'
echo '}'
}

##############################################################################

show_clients()
{
WLAN_MAC=""
RADIOS=$(uci -q show wireless | awk -F. '/type=/{print $2}')
for R in $RADIOS; do
	T=$(ubus call network.wireless status '{"device":"'$R'"}')
	IFNAME=$(echo "$T" | jsonfilter -q -e '@.*.interfaces[@.config.network[*]="lan"].ifname')
	if [ -n "$IFNAME" ]; then
		T1=$(echo "$T" | jsonfilter -e @.*.config.channel)
		[ $T1 -gt 14 ] && BAND=5 || BAND=2
		for i in $IFNAME; do
			WLAN_MAC="$WLAN_MAC "$(iw dev $i station dump | awk -v band=$BAND '{if($1 == "Station") {MAC=$2;station[MAC]=1} if($0 ~ /rx bytes:/) {rx[MAC]=$3} if($0 ~ /tx bytes:/) {tx[MAC]=$3} if($0 ~ /^\s*signal:/) {signal[MAC]=$2} if($0 ~ /connected time:/) {connected[MAC]=$3}} END for (w in station) {printf "{\"mac\":\"%s\",\"tx\":%d,\"rx\":%d,\"signal\":%d,\"connected\":%d,\"band\":%d ", w, tx[w], rx[w], signal[w], connected[w], band}')
		done
	fi
done

echo '{"clients":['
for M in $WLAN_MAC; do
	T=${M%\",\"tx*}
	MAC=${T##*\"}
	IP=$(awk '/'$MAC'/{printf ",\"ip\":\"%s\",\"dhcpname\":\"%s\"", $3, $4}' /tmp/dhcp.leases)
	[ -z "$IP" ] && IP=$(awk '/0x[26]\s*'$MAC'/{printf ",\"ip\":\"%s\",\"dhcpname\":\"\"", $1; exit}' /proc/net/arp)
	[ -z "$IP" ] && IP=',"ip":"","dhcpname":""'

	T=$(uci -q get easyconfig.m${MAC//:/}.name)
	[ -n "$T" ] && USERNAME=',"username":"'$T'"' || USERNAME=',"username":""'

	T=${M%,\"ba*}
	CONNECTED=${T##*:}
	if $TIMEISVALID; then
		CONNECTED_SINCE=',"connected_since":"'$(date "+%Y-%m-%d %H:%M" -d "@$(($(date +%s) - CONNECTED))")'"'
	else
		CONNECTED_SINCE=',"connected_since":""'
	fi

	BLOCK=',"block":0,"blockdata":""'
	T=$(uci -q get firewall.m${MAC//:/})
	[ -n "$T" ] && BLOCK=',"block":1,"blockdata":""'
	T=$(easyconfig_firewall_helper.sh get $MAC)
	[ "x$T" = "x000000000000000000000000000000000000000000000000" ] || BLOCK=',"block":2,"blockdata":"'$T'"'

	TUP=$(uci -q get nft-qos.m${MAC//:/}up.rate)
	TDOWN=$(uci -q get nft-qos.m${MAC//:/}down.rate)
	QOS=',"qos":{"bwup":'${TUP:-0}',"bwdown":'${TDOWN:-0}'}'

	STATICDHCP=',"staticdhcp":"'$(uci -q get dhcp.m${MAC//:/}.ip)'"'

	echo "${M}${IP}${USERNAME}${CONNECTED_SINCE}${BLOCK}${QOS}${STATICDHCP}},"
done
echo '],'

echo '"logs":['
T=$(zcat /tmp/easyconfig_wlanlogs.txt.gz 2>/dev/null | awk '
/AP-STA-CONNECTED/ {TIME[$6]=sprintf("%s-%02d-%02d %s", $5, (match("JanFebMarAprMayJunJulAugSepOctNovDec",$2)+2)/3, $3, $4); MAC[$6]=$11; WIFI[$11]=$6; EVENT[$6]="connect"; DESC[$6]=$9}
/DHCPACK\(/ {if(WIFI[$11]!=0){DHCP[WIFI[$11]]=$12; NAME[$11]=$12}}
/AP-STA-DISCONNECTED/ {TIME[$6]=sprintf("%s-%02d-%02d %s", $5, (match("JanFebMarAprMayJunJulAugSepOctNovDec",$2)+2)/3, $3, $4); MAC[$6]=$11; WIFI[$11]=0; EVENT[$6]="disconnect"; DHCP[$6]=NAME[$11]; NAME[$11]=""; DESC[$6]=$9}
END { for (T in EVENT) {
		printf "{\"id\":\"%s\",\"time\":\"%s\",\"mac\":\"%s\",\"username\":\"\",\"dhcpname\":\"%s\",\"event\":\"%s\",\"desc\":\"%s\"},\n", T, TIME[T], MAC[T], DHCP[T], EVENT[T], DESC[T]
	}
}')

MACS=$(uci show easyconfig | awk -F[=m] '/=mac/{print $2}')
for MAC in $MACS; do
	NAME=$(uci -q get easyconfig.m${MAC}.name)
	if [ -n "$NAME" ]; then
		TMAC=${MAC:0:2}:${MAC:2:2}:${MAC:4:2}:${MAC:6:2}:${MAC:8:2}:${MAC:10:2}
		T=$(echo "$T" | sed "s/,\"mac\":\"$TMAC\",\"username\":\".*\",\"dhcpname\"/,\"mac\":\"$TMAC\",\"username\":\"$NAME\",\"dhcpname\"/g")
	fi
done

BANDS=$(iw dev 2>/dev/null | awk '{if($0 ~ /Interface /) {INTERFACE = $2; ssid[INTERFACE] = ""; band[INTERFACE] = "?"}
if($1 == "ssid") {t="";for(i=2;i<=NF-1;++i){t=t$i" "};if(NF<2){t=""}else{t=t$NF}; gsub(/\\/,"\\\\", t); gsub(/\"/, "\\\"", t); ssid[INTERFACE]=t}
if($1 == "channel") {if($2 < 36){band[INTERFACE] = "2"}else{band[INTERFACE] = "5"}}
} END { for (t in ssid) {
    printf "{\"interface\":\"%s:\",\"ssid\":\"%s\",\"band\":\"%s\"},\n", t, ssid[t], band[t]
}
}')
for B in $BANDS; do
	INTERFACE=$(echo $B | jsonfilter -q -e @.interface)
	SSID=$(echo $B | jsonfilter -q -e @.ssid)
	BAND=$(echo $B | jsonfilter -q -e @.band)
	T=$(echo "$T" | sed "s/,\"desc\":\"$INTERFACE\"/,\"desc\":{\"band\":$BAND,\"ssid\":\"$SSID\"}/g")
done

echo "${T%?}"
echo ']'
echo '}'
}

##############################################################################

show_traffic()
{
if [ ! -e /usr/lib/easyconfig/easyconfig_traffic.txt.gz ]; then
	mkdir -p /usr/lib/easyconfig
	touch /usr/lib/easyconfig/easyconfig_traffic.txt
	gzip /usr/lib/easyconfig/easyconfig_traffic.txt
fi
echo '{'
[ -e /etc/crontabs/root ] && TEN=$(grep easyconfig_traffic /etc/crontabs/root)
if [ -n "$TEN" ]; then
	echo '"traffic_enabled": true,'
else
	echo '"traffic_enabled": false,'
fi

T_PERIOD=$(uci -q get easyconfig.traffic.period)
T_CYCLE=$(uci -q get easyconfig.traffic.cycle)
T_WARNING_ENABLED=$(uci -q get easyconfig.traffic.warning_enabled)
T_WARNING_VALUE=$(uci -q get easyconfig.traffic.warning_value)
T_WARNING_UNIT=$(uci -q get easyconfig.traffic.warning_unit)
T_WARNING_CYCLE=$(uci -q get easyconfig.traffic.warning_cycle)

echo '"traffic_period": "'${T_PERIOD:-10}'",'
echo '"traffic_cycle": "'${T_CYCLE:-1}'",'
echo '"traffic_warning_enabled": "'${T_WARNING_ENABLED:-0}'",'
echo '"traffic_warning_value": "'${T_WARNING_VALUE:-0}'",'
echo '"traffic_warning_unit": "'${T_WARNING_UNIT:-g}'",'
echo '"traffic_warning_cycle": "'${T_WARNING_CYCLE:-p}'"'
echo '}'
}

##############################################################################

show_modem()
{
	if [ "x$(uci -q get network.wan.proto)" = "xqmi" ] && [ "x$(uci -q get easyconfig.modem.force_qmi)" = "x1" ]; then
		D=$(uci -q get network.wan.device)
		T=$(uqmi -sd $D --get-serving-system --get-signal-info | sed 'N;s|\n| |;s|} {|,|')

		json_load "$T"

		json_get_vars type plmn_description rssi registration roaming plmn_mcc plmn_mnc

		MODE=$(echo $type | tr 'a-z' 'A-Z')

		if [ "x$(uci -q get easyconfig.modem.force_plmn)" = "x1" ]; then
			COPS_NUM="$plmn_mcc"$(printf %02d $plmn_mnc)
			T=$(awk -F[\;] '/'$COPS_NUM'/ {print $2}' /usr/share/3ginfo-lite/mccmnc.dat)
			[ "x$T" = "x" ] || plmn_description=$T
		fi

		if [ -n "$rssi" ]; then
			[ $rssi -ge -51 ] && rssi=-51
			SIGNAL=$(((rssi+113)*100/62))
		else
			SIGNAL=0
		fi

		case "x$registration" in
			"xnot_registered")
				registration="0"
				;;
			"xregistered")
				registration="1"
				[ "x$roaming" = "x1" ] && registration="5"
				;;
			"xsearching")
				registration="2"
				plmn_description=""
				;;
			"xregistering_denied")
				registration="3"
				;;
			*)
				registration="4"
				;;
		esac

		echo "{\"signal\":\"$SIGNAL\",\"operator_name\":\"$plmn_description\",\"mode\":\"$MODE\",\"registration\":\"$registration\""
#		echo ",\"addon\":[{\"RSSI\":\"$rssi\"}]"
		echo "}"
	else
		T=$(uci -q get easyconfig.modem.force_plmn)
		[ "x$T" = "x1" ] || T=""
		FORCE_PLMN=$T /usr/share/3ginfo-lite/3ginfo.sh
	fi
}

##############################################################################

show_ussd() {
	read input;
	json_load "$input"
	json_get_var code code
	if [ -z "$code" ]; then
		T="Error: wrong ussd code"
	else
		OPT=""
		T=$(uci -q get easyconfig.ussd.raw_input)
		[ "x$T" = "x1" ] && OPT="$OPT -R"
		T=$(uci -q get easyconfig.ussd.raw_output)
		[ "x$T" = "x1" ] && OPT="$OPT -r"
		[ -e /tmp/modem ] || /usr/share/3ginfo-lite/3ginfo.sh >/dev/null 2>&1
		DEVICE=$(cat /tmp/modem)
		if [ -n "$DEVICE" ]; then
			T=$(sms_tool -d $DEVICE $OPT ussd "$code" 2>/dev/null)
		else
			T=""
		fi
	fi

	json_init
	json_add_string "response" "$T"
	json_dump
}

##############################################################################

show_ussdshortcuts() {
	echo '{"shortcuts":['
	T=$(uci show easyconfig | awk -F[=.] '/=ussd/{print $2}')
	for i in $T; do
		echo '{"'$(uci -q get easyconfig.$i.code)'":"'$(uci -q get easyconfig.$i.description)'"},'
	done
	echo ']}'
}

##############################################################################

show_sms() {
	read input;
	json_load "$input"
	json_get_var action action
	json_get_var arg1 arg1
	json_get_var arg2 arg2

	[ -e /tmp/modem ] || /usr/share/3ginfo-lite/3ginfo.sh >/dev/null 2>&1
	DEVICE=$(cat /tmp/modem)
	if [ -z "$DEVICE" ]; then
		echo '{"response":"Device not found"}'
		exit 0
	fi

	[ "x$action" = "x" ] && action="read"
	if [ "x$action" = "xread" ]; then
		STORAGE=""
		T=$(uci -q get easyconfig.sms.storage)
		[ "x$T" = "x" ] || STORAGE="-s $T"
		sms_tool -d $DEVICE $STORAGE -j -f "%Y-%m-%d %H:%M:%S" recv
	fi

	if [ "x$action" = "xsend" ]; then
		T=$(sms_tool -d $DEVICE send "$arg1" "$arg2")
		echo "{\"response\":\"$T\"}" | tr '\n' ' '
	fi

	if [ "x$action" = "xdelete" ]; then
		T=$(sms_tool -d $DEVICE delete "$arg1")
		echo "{\"response\":\"$T\"}" | tr '\n' ' '
	fi
}

##############################################################################

show_queries() {
	echo '{"result":['

	T=$(logread -e "query\[A\]\|NXDOMAIN" | awk '
$10 ~ /query\[A\]/ && $13 !~ /127.0.0.1/ {LINE[$9]=sprintf("\"id\":%d,\"time\":\"%s-%02d-%02d %s\",\"query\":\"%s\",\"host\":\"%s\",\"nxdomain\":", NR, $5, (match("JanFebMarAprMayJunJulAugSepOctNovDec",$2)+2)/3, $3, $4, $11, $13); NXDOMAIN[$9]="false"}
$13 ~ /NXDOMAIN/ {NXDOMAIN[$9]="true"}
END {for (T in LINE) {printf "{%s%s},\n", LINE[T], NXDOMAIN[T]}}
')
	IPS=$(echo "$T" | sed 's/.*"host":"\(.*\)",.*/\1/g' | sort -u)

	for IP in $IPS; do
		MAC=$(awk '/'$IP'/{print $2}' /tmp/dhcp.leases)
		if [ -n "$MAC" ]; then
			DHCPNAME=$(awk '/'$IP'/{print $4}' /tmp/dhcp.leases)
			[ "x$DHCPNAME" = "x*" ] && DHCPNAME=""
		else
			MAC=$(awk '/'$IP'/{print $4}' /proc/net/arp)
		fi
		if [ -n "$MAC" ]; then
			USERNAME=$(uci -q get easyconfig.m${MAC//:/}.name)
		fi
		NAME=""
		[ -n "$MAC" ] && NAME=$MAC
		[ -n "$DHCPNAME" ] && NAME=$DHCPNAME
		[ -n "$USERNAME" ] && NAME=$USERNAME
		if [ -n "$NAME" ]; then
			T=$(echo "$T" | sed "s/\"host\":\"$IP\"/\"host\":\"$NAME\"/g")
		fi
	done

	echo "$T"
	echo "]}"
}

##############################################################################

show_wifiscan() {
	echo '{"result":['
	for IFACE in /sys/class/net/wlan[0-9]; do
		IFACE1=$(basename $IFACE)
		iw dev $IFACE1 scan 2>/dev/null | awk 'function abs(value){return (value<0?-value:value)}{gsub("(on","");
			if($0 ~ /BSS.*wlan.*/) {MAC = $2; wifi_enc[MAC] = ""; wifi_chan[MAC] = "?"; wifi_mode1[MAC] = ""; wifi_mode2[MAC] = ""}
			if($1 == "SSID:") {t="";for(i=2;i<=NF-1;++i){t=t$i" "};if(NF<2){t=""}else{t=t$NF}; gsub(/\\/,"\\\\", t); gsub(/\"/, "\\\"", t); wifi_ssid[MAC]=t}
			if($1 == "signal:") {wifi_sig[MAC] = $2}
			if($1 == "freq:") {wifi_freq[MAC] = $2; if($2<5000){wifi_mode1[MAC] = "g"}else{wifi_mode1[MAC] = "a"}}
			if($0 ~ /primary channel:/) {wifi_chan[MAC] = $4}
			if($0 ~ /secondary channel offset: no secondary/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT20"}
			if($0 ~ /secondary channel offset: above/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT40+"}
			if($0 ~ /secondary channel offset: below/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT40-"}
			if($0 ~ /STA channel width: 20 MHz/) {wifi_mode1[MAC] = "n"; wifi_mode2[MAC] = "HT20"}
			if($0 ~ /VHT operation:/) {if(wifi_chan[MAC] > 14){wifi_mode1[MAC] = "ac"}; wifi_mode2[MAC] = "VHT20"}
			if($0 ~ /center freq segment 1:/) {wifi_vhtch1[MAC] = $6; if($6>0 && wifi_mode2[MAC] != "VHT80" && $6 != wifi_chan[MAC]){wifi_mode2[MAC] = "VHT40"}}
			if($0 ~ /center freq segment 2:/) {wifi_vhtch2[MAC] = $6; if($6>0){if(abs(wifi_vhtch2[MAC] - wifi_vhtch1[MAC]) > 16){wifi_mode2[MAC] = "VHT80+80"}else{wifi_mode2[MAC] = "VHT160"}}}
			if($0 ~ /channel width: 1 \(80 MHz\)/) {wifi_mode2[MAC] = "VHT80"}
			if($1 == "capability:") {t=$3; gsub(/\(/,"", t);gsub(/\)/,"", t); if(and(t,16)==16){wifi_enc[MAC] = "WEP"}}
			if($0 ~ /Group cipher: CCMP/) {wifi_enc[MAC] = "WPA"}
			if($0 ~ /Group cipher: TKIP/) {wifi_enc[MAC] = "WPA"}
			if($0 ~ /Authentication suites: PSK/) {wifi_enc[MAC] = "WPA Personal"}
			if($0 ~ /Authentication suites: IEEE 802.1X/) {wifi_enc[MAC] = "WPA Enterprise"}
			if($0 ~ /Authentication suites: SAE/) {wifi_enc[MAC] = "WPA3 Personal"}
			if($0 ~ /Authentication suites: PSK PSK\/SHA-256 SAE/) {wifi_enc[MAC] = "WPA2/WPA3 Personal"}
			} END { for (w in wifi_enc) {
					printf "{\"mac\":\"%s\",\"ssid\":\"%s\",\"freq\":\"%s\",\"signal\":\"%s\",\"channel\":\"%s\",\"encryption\":\"%s\",\"mode1\":\"%s\",\"mode2\":\"%s\",\"vhtch1\":\"%s\",\"vhtch2\":\"%s\"},\n", w, wifi_ssid[w], wifi_freq[w], wifi_sig[w], wifi_chan[w], wifi_enc[w], wifi_mode1[w], wifi_mode2[w], wifi_vhtch1[w], wifi_vhtch2[w]
				}
			}'
	done
	echo ']}'
}

##############################################################################

pincode()
{
	read input;
	json_load "$input"
	json_get_vars proto device pincode

	if [ "x$proto" = "xqmi" ]; then
		uqmi -d $device --verify-pin1 $pincode >/dev/null 2>&1
	fi
	if [ "x$proto" = "xncm" ] || [ "x$proto" = "x3g" ]; then
		PINCODE="$pincode" gcom -d "$device" -s /etc/gcom/setpin.gcom >/dev/null 2>&1
	fi
	echo '{}'
}

detect_wan()
{
# modem usb qmi
	T=$(grep qmi_wwan /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$T" ] ; then
		F=$(mktemp)
		DEVICE=""
		DEVICES=$(ls /dev/cdc-wdm*)
		for D in $DEVICES; do
			echo "" > $F
			(uqmi -s -d $D --get-pin-status > $F) &
			sleep 2
			killall uqmi >/dev/null 2>&1
			if grep -q '"pin1_status"' $F; then
				DEVICE=$D
				break
			fi
			if grep -q '"Not supported"\|"Invalid QMI command"' $F; then
				DEVICE=$D
				break
			fi
		done

		if [ -n "$DEVICE" ]; then
			if grep -q '"pin1_status":"not_verified"' $F; then
				rm $F >/dev/null 2>&1
				echo '{"proto":"qmi","device":"'$DEVICE'","action":"pinrequired"}'
				exit 0
			fi
			rm $F >/dev/null 2>&1
			echo '{"proto":"qmi","device":"'$DEVICE'","apn":"internet"}'
			exit 0
		fi
	fi

# modem usb ncm
	T=$(grep cdc_ncm /sys/kernel/debug/usb/devices 2>/dev/null)
	if [ -n "$T" ] ; then
		ifdown wan
		DEVICES=$(ls /dev/ttyUSB* /dev/cdc-wdm*)

		for D in $DEVICES; do
			O=$(gcom -d $D -s /etc/gcom/checkmodem.gcom)
			if echo "$O" | grep -q "SIM PIN"; then
				echo '{"proto":"ncm","device":"'$D'","action":"pinrequired"}'
				exit 0
			fi
			if echo "$O" | grep -q "+CPIN"; then
				DEVICE=$D
				break
			fi
		done

		APN=$(echo $O | awk -F, '/^\+CGDCONT: 1/{print $3}' | xargs)
		echo '{"proto":"ncm","device":"'$D'","apn":"'${APN:-internet}'"}'
		exit 0
	fi

# modem usb, generic
	T=$(ls /dev/ttyUSB* /dev/ttyACM* 2>/dev/null)
	if [ -n "$T" ] ; then
		ifdown wan

		for D in $T; do
			O=$(gcom -d $D -s /etc/gcom/checkmodem.gcom)
			if echo "$O" | grep -q "SIM PIN"; then
				echo '{"proto":"3g","device":"'$D'","action":"pinrequired"}'
				exit 0
			fi
			if echo "$O" | grep -q "+CPIN"; then
				DEVICE=$D
				break
			fi
		done

		APN=$(echo $O | awk -F, '/^\+CGDCONT: 1/{print $3}' | xargs)
		echo '{"proto":"3g","device":"'$D'","apn":"'${APN:-internet}'"}'
		exit 0
	fi

# modem usb hilink or rndis
	T=$(grep -EHi "(cdc ethernet control|rndis communications control)" /sys/class/net/*/device/interface 2>/dev/null | cut -f5 -d/)
	[ -z "$T" ] && T=$(ls -l /sys/class/net/*/device/driver | grep cdc_ether | sed 's!.*/sys/class/net/\(.*\)/device/.*!\1!')
	if [ -n "$T" ]; then
		echo '{"proto":"dhcp_hilink","ifname":"'$T'"}'
		exit 0
	fi

# wan port
	if [ -e /etc/board.json ]; then
		T=$(jsonfilter -i /etc/board.json -e '@.network.wan.ifname')
	elif [ -e /etc/gargoyle_default_ifs ]; then
		T=$(awk '{print $2}' /etc/gargoyle_default_ifs)
	fi
	if [ -n "$T" ] ; then
		echo '{"proto":"dhcp","ifname":"'$T'"}'
		exit 0
	fi

# none
	echo '{"proto":"none"}'
}

##############################################################################

reboot()
{
	[ -e /etc/crontabs/root ] && TEN=$(grep easyconfig_traffic /etc/crontabs/root)
	if [ -n "$TEN" ]; then
		uci set easyconfig.traffic.period=1
		/usr/bin/easyconfig_traffic.sh
	fi
	sync
	/sbin/reboot
}

##############################################################################

upgrade()
{
	read input;
	json_load "$input"
	json_get_vars step arg1 arg2

	# step 2
	if [ "x$step" = "x2" ]; then
		# 4 brak podanego url
		# 5 brak podanego sha256sum
		# 6 nie zgadza się suma kontrolna pobranego pliku

		if [ -z "$arg1" ]; then
			echo '{"error":4}'
			exit 0
		fi
		if [ -z "$arg2" ]; then
			echo '{"error":5}'
			exit 0
		fi

		rm /tmp/sysupgrade.bin >/dev/null 2>&1
		wget -q -T 3 -O /tmp/sysupgrade.bin "$arg1"
		T=$(sha256sum /tmp/sysupgrade.bin | awk '{print $1}')
		if [ "x$T" = "x$arg2" ]; then
			sync
			echo "{\"sha256sum\":\"$arg2\"}"
		else
			rm /tmp/sysupgrade.bin >/dev/null 2>&1
			echo '{"error":6}'
		fi
		exit 0
	fi

	# step 3
	if [ "x$step" = "x3" ]; then
		# 7 brak podanego sha256sum
		# 8 brak pliku do aktualizacji
		# 9 nie zgadza się suma kontrolna pobranego pliku

		if [ -z "$arg1" ]; then
			echo '{"error":7}'
			exit 0
		fi
		[ "x$arg2" = "x1" ] && PS="" || PS="-n"

		if [ ! -e /tmp/sysupgrade.bin ]; then
			echo '{"error":8}'
			exit 0
		fi

		T=$(sha256sum /tmp/sysupgrade.bin | awk '{print $1}')
		if [ "x$T" = "x$arg1" ]; then
			sync
			sysupgrade $PS /tmp/sysupgrade.bin
			echo '{"upgrade":"ok"}'
		else
			rm /tmp/sysupgrade.bin >/dev/null 2>&1
			echo '{"error":9}'
		fi
		exit 0
	fi

	# step 1
	# 1 nie można pobrać pliku z danymi
	# 2 nie można znaleźć pliku z firmware
	# 3 nie ma innej wersji

	FSUMS=/tmp/upgrade-sha256sums

	ARCH=$(awk -F[\'\"/] '/DISTRIB_TARGET/{print $2}' /etc/openwrt_release)
	URL="http://dl.eko.one.pl/mifi/$ARCH"
	wget -q -T 3 -O $FSUMS $URL/sha256sums
	if [ ! -s $FSUMS ]; then
		rm $FSUMS >/dev/null 2>&1
		echo '{"error":1}'
		exit 0
	fi

	BOARD=$(cat /tmp/sysinfo/board_name)
	T=$(grep -E "mifi.*$BOARD.*sysupgrade" $FSUMS)
	rm $FSUMS >/dev/null 2>&1
	if [ -z "$T" ]; then
		echo '{"error":2}'
		exit 0
	fi

	CHECKSUM=$(echo "$T" | awk '{print $1}')
	FILE=$(echo "$T" | awk '{print $2}')

	OLD_BUILD=$(awk -F[\'\"/] '/BUILD_ID/{print $2}' /etc/os-release)
	NEW_BUILD=$(echo $FILE | sed 's|.*-\(r[0-9]*-.*\)-'$BOARD'.*|\1|g')

	if [ "x$OLD_BUILD" = "x$NEW_BUILD" ]; then
		echo '{"error":3}'
		exit 0
	fi
	echo "{\"version\":\"$NEW_BUILD\",\"url\":\"$URL/$FILE\",\"sha256sum\":\"$CHECKSUM\"}"
}

##############################################################################

show_pptp()
{
	T=$(ifstatus vpn 2>/dev/null)

	IP=$(echo "$T" | jsonfilter -q -e "@['ipv4-address'][0].address")

	UP=$(echo "$T" | jsonfilter -q -e "@.up")
	if [ "x$UP" = "xtrue" ]; then
		UPTIME=$(echo "$T" | jsonfilter -q -e "@.uptime")
		if $TIMEISVALID; then
			UPTIME_SINCE=$(date "+%Y-%m-%d %H:%M" -d "@$(($(date +%s) - UPTIME))")
		else
			UPTIME_SINCE=""
		fi
	fi

	PROTO=$(uci -q get network.vpn.proto)
	if [ "x$(uci -q get network.vpn)" = "xinterface" ]; then
		NAME=$(uci -q get network.vpn.name)
		AUTO=$(uci -q get network.vpn.auto)
		SERVER=$(uci -q get network.vpn.server)
		USERNAME=$(uci -q get network.vpn.username)
		PASSWORD=$(uci -q get network.vpn.password)
	fi
	MPPE=$(grep -q "^mppe" /etc/ppp/options.pptp && echo "true" || echo "false")
	echo "{\"up\":${UP:-false},\"ip\":\"$IP\",\"uptime\":\"$UPTIME\",\"uptime_since\":\"$UPTIME_SINCE\",\"proto\":\"$PROTO\",\"name\":\""$(escapeJson "$NAME")"\",\"auto\":\"${AUTO:0}\",\"server\":\"$SERVER\",\"username\":\""$(escapeJson "$USERNAME")"\",\"password\":\""$(escapeJson "$PASSWORD")"\",\"mppe\":$MPPE,"

	echo '"profiles":['
	T=$(uci show easyconfig | awk -F[=.] '/=vpn/{print $2}')
	for i in $T; do
		echo '{"proto":"'$(uci -q get easyconfig.$i.proto)'",'
		echo '"name":"'$(escapeJson "$(uci -q get easyconfig.$i.name)")'",'
		echo '"auto":"'$(uci -q get easyconfig.$i.auto)'",'
		echo '"server":"'$(uci -q get easyconfig.$i.server)'",'
		echo '"username":"'$(escapeJson "$(uci -q get easyconfig.$i.username)")'",'
		echo '"password":"'$(escapeJson "$(uci -q get easyconfig.$i.password)")'",'
		echo '"mppe":"'$(uci -q get easyconfig.$i.mppe)'"},'
	done
	echo '],'

	VPNLED=$(uci -q get system.led_vpn.sysfs)
	SYSTEM=$(uci show system)
	T=$(ls -d /sys/class/leds/*:*:* 2>/dev/null | sed 's|/sys/class/leds/||g')
	O=""
	echo '"led":"'$VPNLED'","leds":['
	for LED in $T; do
		if ! echo "$SYSTEM" | grep -q "$LED" || [ "x$LED" = "x$VPNLED" ]; then
			[ -n "$O" ] && O="$O,"
			O="$O"'"'$LED'"'
		fi
	done
	echo "$O"']'

	echo "}"
}

##############################################################################

show_geolocation()
{
	T=$(wget -q -T 3 -O - http://ip-api.com/json/?fields=country,regionName,city,isp,status,query,lat,lon)
	if [ -z "$T" ]; then
		echo '{"status":"fail"}'
	else
		echo $T
	fi
}

##############################################################################

adblock_source()
{
	config_get enabled $1 enabled
	config_get adb_src_desc $1 adb_src_desc
	json_add_object
	json_add_string "section" "$1"
	json_add_boolean "enabled" $enabled
	json_add_string "desc" "$adb_src_desc"
	json_close_object
}

show_adblock()
{
	if [ ! -e /etc/config/adblock ]; then
		echo '{"enabled":false}'
		exit 0
	fi

	LISTS=""
	if [ -e /etc/adblock/adblock.sources.gz ]; then
		json_load "$(zcat /etc/adblock/adblock.sources.gz)"
		json_get_keys keylist
		for key in ${keylist}; do
			json_select "${key}"
			json_get_var SIZE size
			json_get_var DESCURL descurl
			json_get_var FOCUS focus
			uci -q get adblock.global.adb_sources | grep -q ${key} && ENABLED=1 || ENABLED=0
			json_select ..
			[ -n "$LISTS" ] && LISTS="${LISTS},"
			LISTS="${LISTS}{\"section\":\"${key}\",\"enabled\":${ENABLED},\"size\":\"${SIZE}\",\"descurl\":\"${DESCURL}\",\"focus\":\"${FOCUS}\"}"
		done
		FORCEDNS=$(uci -q get adblock.global.adb_forcedns)
	else
		FORCEDNS=$(uci -q get adblock.extra.adb_forcedns)
	fi

	ENABLED=$(uci -q get adblock.global.adb_enabled)

	rtfile="$(uci -q get adblock.extra.adb_rtfile)"
	rtfile="${rtfile:-"/tmp/adb_runtime.json"}"
	if [ -s "$rtfile" ]; then
		json_load "$(cat "${rtfile}" 2>/dev/null)"
		json_select data
		if [ -e /etc/adblock/adblock.sources.gz ]; then
			json_get_var DOMAINS blocked_domains
		else
			json_get_var DOMAINS overall_domains
			DOMAINS=${DOMAINS%% *}
		fi
	fi

	json_init
	json_add_boolean "enabled" $ENABLED
	json_add_boolean "forcedns" $FORCEDNS
	json_add_string "domains" "$DOMAINS"

	if [ -e /etc/adblock/adblock.sources.gz ]; then
		json_add_boolean "compressed_lists" 1
		eval "$(jshn -r "{'lists':[${LISTS}]}" | grep -v json_init)"
	else
		json_add_boolean "compressed_lists" 0
		json_add_array lists
		. /lib/functions.sh
		config_load adblock
		config_foreach adblock_source source
		json_close_array
	fi

	json_add_array blacklist
	F=$(uci -q get adblock.blacklist.adb_src)
	[ -z "$F" ] && F=/etc/adblock/adblock.blacklist
	if [ -s "$F" ]; then
		while read line; do
			json_add_string "" "$line"
		done < $F
	fi
	json_close_array

	json_add_array whitelist
	F=/etc/adblock/adblock.whitelist
	if [ -s "$F" ]; then
		while read line; do
			json_add_string "" "$line"
		done < $F
	fi
	json_close_array

	json_dump
}

##############################################################################

show_nightmode()
{
	echo '{'
	[ -e /etc/crontabs/root ] && T=$(grep easyconfig_nightmode /etc/crontabs/root)
	if [ -n "$T" ]; then
		echo '"enabled": true,'
	else
		echo '"enabled": false,'
	fi
	LAT=$(uci -q get easyconfig.global.latitude)
	LON=$(uci -q get easyconfig.global.longitude)
	echo '"latitude":"'$LAT'",'
	echo '"longitude":"'$LON'",'
	SUNRISE=""
	SUNSET=""
	if [ -n "$LAT" ] && [ -n "$LON" ]; then
		[ "x${LAT:0:1}" = "x-" ] && LAT="${LAT:1}S" || LAT="${LAT}N"
		[ "x${LON:0:1}" = "x-" ] && LON="${LON:1}W" || LON="${LON}.E"
		if [ -e /usr/bin/sunwait ]; then
			T=$(sunwait -p $LAT $LON)
			SUNRISE=$(echo "$T" | awk '/Sun rises/{print $3}')
			SUNSET=$(echo "$T" | awk '/Sun rises/{print $6}')
			SUNRISE="${SUNRISE:0:2}:${SUNRISE:2:2}"
			SUNSET="${SUNSET:0:2}:${SUNSET:2:2}"
		fi
	fi
	echo '"sunrise":"'$SUNRISE'",'
	echo '"sunset":"'$SUNSET'"'
	echo '}'
}

##############################################################################

leds() {
	read input;
	json_load "$input"
	json_get_var action action
	if [ "x$action" = "xoff" ]; then
		for i in /sys/class/leds/*:*:*; do
		echo none > $i/trigger
		echo 0 > $i/brightness
		done
		touch /tmp/led_off
	else
		rm /tmp/led_off 2>/dev/null
		/etc/init.d/led start >/dev/null 2>&1
		. /etc/diag.sh
		set_state done
	fi
	echo '{"response":"done"}'
}

##############################################################################

case "$1" in
	list)
		echo '{'
		echo '"status":{},'
		echo '"config":{},'
		echo '"system":{},'
		echo '"watchdog":{},'
		echo '"clients":{},'
		echo '"traffic":{},'
		echo '"modem":{},'
		echo '"ussd":{"code":"string"},'
		echo '"ussdshortcuts":{},'
		echo '"sms":{"action":"string","arg1":"string","arg2":"string"},'
		echo '"queries":{},'
		echo '"wifiscan":{},'
		echo '"detect_wan":{},'
		echo '"pincode":{"proto":"string","device":"string","pincode":"string"},'
		echo '"reboot":{},'
		echo '"upgrade":{"step":"string","arg1":"string","arg2":"string"},'
		echo '"pptp":{},'
		echo '"geolocation":{},'
		echo '"adblock":{},'
		echo '"nightmode":{},'
		echo '"leds":{"action":"string"}'
		echo '}'
	;;
	call)
		case "$2" in
			status)
				show_status
				;;
			config)
				show_config
				;;
			system)
				show_system
				;;
			watchdog)
				show_watchdog
				;;
			clients)
				show_clients
				;;
			traffic)
				show_traffic
				;;
			modem)
				show_modem
				;;
			ussd)
				show_ussd
				;;
			ussdshortcuts)
				show_ussdshortcuts
				;;
			sms)
				show_sms
				;;
			queries)
				show_queries
				;;
			wifiscan)
				show_wifiscan
				;;
			detect_wan)
				detect_wan
				;;
			pincode)
				pincode
				;;
			reboot)
				reboot
				;;
			upgrade)
				upgrade
				;;
			pptp)
				show_pptp
				;;
			geolocation)
				show_geolocation
				;;
			adblock)
				show_adblock
				;;
			nightmode)
				show_nightmode
				;;
			leds)
				leds
				;;
		esac
	;;
esac

exit 0
